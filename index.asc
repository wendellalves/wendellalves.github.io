:toc: left
= Exercícios - Processamento Digital de imagens

Wendell Alves <wendell.a.silva2@gmail.com>

== Lista de Atividades

* Atividade 3.1
* Atividade 3.2
* Atividade 4.1
* Atividade 4.2
* Atividade 5.1
* Atividade 5.2
* Atividade 6.1
* Atividade 8.2
* Atividade 11.1

=== Atividade 3.1

Programa que solicita do usuário as coordenadas de dois pontos P1 e P2 dentro dos limites da imagem. Com isso, o retângulo limitado pelos pontos P1 e P2 mostrará o negativo da imagem na região correspondente. Esse negativo é feito pegando a imagem em escala de cinza e atribuindo a cada pixel o valor de 255, maior valor em escala de cinza, menos o valor atual do pixel.

O código fonte link:NegativoRegiao.cpp[] está mostrado abaixo:
----
include::NegativoRegiao.cpp[]
----

Abaixo encontram-se as imagens de entrada e saída respectivamente.

image::biel.png[Entrada do Programa, title="Entrada dos programas 3.1 e 3.2"]
image::saidaNegativoRegiao.png[Entrada do Programa, title="Saída do programa"]

=== Atividade 3.2

Programa divide a image em quatro partes e misturar como se fosse um quebra-cabeças.
Para isto ser feito, foi necessário criar uma matriz auxiliar e percorrer as duas matrizes de imagem quatro vezes, atribuindo o valor dos pixels de uma na posição trocada na outra martiz. O primeiro conjunto de dois "for" que percorrem as matrizes percorre a primeira matriz da linha e coluna zero até a metade do número de linhas e metade do número de colunas, colocando esses pixels nas linhas e colunas da segunda matriz que são percorridas da metade do número de linhas e colunas até as últimas linhas e colunas. Nos outros "for" a idéia é a mesma, mas apenas alterando os limites para percorrer nas respectivas matrizes.

O código fonte link:trocaregioes.cpp[]  está mostrado abaixo:
----
include::trocaregioes.cpp[]
----

Abaixo encontra-se a imagem de saída.

image::trocaregioes.png[Entrada do Programa, title="Saída do programa"]

=== Atividade 4.1

Programa para realizar a contagem dos objetos na cena se caso existam mais de 255 objetos na cena.
Para essa contagem ser efetuada, precisamos sair enumerando todos os objetos de cor diferente da do fundo da imagem com cores acrescidas de um em um, contagem feita utilizando a função floodFill. Porém ao chegar no valor de 254 devemos pular a cor para o valor de 256 para evitarmos misturar os objetos com tom de cinza 255, após o término da contagem, só é necessário subtrair um caso o número de objetos seja maior que 254.

O código fonte link:contarmaisde255.cpp[]  está mostrado abaixo:
----
include::contarmaisde255.cpp[]
----

Abaixo encontram-se as imagens de entrada e saída respectivamente.

image::bolhas.png[Entrada do Programa, title="Entrada dos programas 4.1 e 4.2"]
image::contarmaisde255.png[Entrada do Programa, title="Saída do programa"]

=== Atividade 4.2

Algoritmo para contar as bolhas que possuem buracos e as que não possuem buracos, eliminando as que tocam as bordas, pois a princípio não podemos dizer se estas possuem ou não buracos.
Para fazer a eliminação das bolhas que tocam as bordas, precisamos apenas aplicar um floodFill com o valor do fundo da imagem em todos os pontos da primeira e última linhas e coluna. Para contar as bolhas com buraco, foi preciso primeiro contar a quantidade de bolhas. Depois disso é necessário percorrer a imagem fazendo um decréscimo nas imagens que já forem sendo contadas com buraco, e no final só é necessário subtrair o número de com buraco do número de bolhas total.

O código fonte link:contarburacos.cpp[]  está mostrado abaixo:
----
include::contarburacos.cpp[]
----

Abaixo encontra-se a imagem de saída.
image::contarburacos.png[Entrada do Programa, title="Saída do programa"]

=== Atividade 5.1

Algoritmo que tem como objetivo equalizar a imagem capturada. Primeira coisa que foi feita foi converter a imagem capturada para escala de cinza para ficar mais fácil de ser manipulada e depois disso foi utilizado o filtro equalizeHist para equalizar a imagem para depois ser exibida lado a lado da imagem original.

O código fonte link:equalize.cpp[]  está mostrado abaixo:
----
include::equalize.cpp[]
----

=== Atividade 5.2

Algoritmo que tem como objetivo implementar um filtro que seja capaz de detectar movimento na imagem utilizando um método de comparação das diferenças entre as imagens.
Nesse algoritmo é feito o histograma da imagem, e dentro do while é feita mais uma captura de imagem e tirado o histograma da mesma, para obtermos duas imagens de tempos diferentes e compararmos. Dentro desse while, é feita a soma da diferença absoluta dos histogramas para ter a quantidade de mudança entres as imagens.

O código fonte link:motiondetector.cpp[]  está mostrado abaixo:
----
include::motiondetector.cpp[]
----

=== Atividade 6.1

Algoritmo que possui um menu com várias opções de filtro:
 a - Calcular módulo;
 m - Media;
 g - Gauss;
 v - Verticals;
 h - Horizontal;
 l - Laplaciano;
 k - Glaussiano depois laplaciano;
 esc - sair.

Algoritmo cuja a opção 'k' passa um filtro Gaussiano e depois um filtro Laplaciano.
Para esse procedimento de passar dois filtros ser efetuado, foi necessário a criação de uma flag para quando opção "k" for escolhida, seja aplicada o filtro da gaussiana e posteriormente o código entre em um condicional if e assim o resultado da filtragem da gaussiana passe pelo filtro do laplaciano, obtendo desta forma o filtro do laplaciano do gaussiano.

O código fonte link:laplalgauss.cpp[]  está mostrado abaixo:
----
include::laplalgauss.cpp[]
----

=== Atividade 8.2

Este algoritmo tem como objetivo usar o exemplo da DFT (Transformada Discreta de Fourier) para criar um filtro Homomórfico, o código da DFT é link:dft.cpp[]. O filtro Homomórfico tem como finalidade melhorar imagens com iluminação irregular.

O código fonte link:dft.cpp[] está mostrado abaixo:
----
include::dft.cpp[]
----

A imagem que passou por esse processo de filtragem é a link:CarroEscuro.png[], mostrada logo abaixo, em seguida temos a imagem de saída do programa link:filtrada.png[]

image::CarroEscuro.png[Entrada do Programa, title="Entrada do programa"]

image::filtrada.png[Saída do Programa, title="Saída do programa"]

O código fonte link:filtroHomomórfico.cpp[] está mostrado abaixo:

----
include::filtroHomomórfico.cpp[]
----

=== Atividade 11.1

Este algoritmo tem como objetivo usar o exemplo link:canny.cpp[] e link:pontilhismo.cpp[] para criar um filtro link:cannypoints.cpp[]. A idéia do link:cannypoints.cpp[] é uzar as bordas produzidas pelo algoritmo de Canny para melhorar a qualidade da imagem pontilhista gerada, os programas link:canny.cpp[] e link:pontilhismo.cpp[] estão mostrados logo abaixo.

O código fonte link:canny.cpp[] está mostrado abaixo:
----
include::canny.cpp[]
----
O código fonte link:pontilhismo.cpp[] está mostrado abaixo:
----
include::pontilhismo.cpp[]
----

A imagem que passou por esse processo de filtragem é a link:pontemaua.jpg[], mostrada logo abaixo seguida das imagens de saída do programa com três variações de valores do filtro de Canny, para cada imagem das bordas do filtro de Canny temos a respectiva imagem pontilhada baseada na mesma.

image::pontemaua.jpg[Entrada do Programa, title="Entrada do programa"]

image::pontos.jpg[Entrada do Programa, title="Saída do programa pontilhismo.cpp"]

image::bordasMin.jpg[Saída do Programa, title="Bordas para um valor mínimo do filtro de Canny"]
image::pontosMin.jpg[Saída do Programa, title="Saída do programa para um valor mínimo do filtro de Canny"]

image::bordasMed.jpg[Saída do Programa, title="Bordas para um valor médio do filtro de Canny"]
image::pontosMed.jpg[Saída do Programa, title="Saída do programa para um valor médio do filtro de Canny"]

image::bordasMax.jpg[Saída do Programa, title="Bordas para um valor maximo do filtro de Canny"]
image::pontosMax.jpg[Saída do Programa, title="Saída do programa para um valor maximo do filtro de Canny"]

O código fonte link:cannypoints.cpp[] está mostrado abaixo:

----
include::cannypoints.cpp[]
----

== Bibliografia
[bibliography]
- http://docs.opencv.org/2.4/modules/refman.html. 'Referência da biblioteca OpenCV.'
- http://www.cplusplus.com. 'Principal portal de desenvolvimento e referência para programação em C++'.
